<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>moss on Daniel Mangum</title>
    <link>https://danielmangum.com/categories/moss/</link>
    <description>Recent content in moss on Daniel Mangum</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 04 Aug 2023 00:10:34 -0600</lastBuildDate><atom:link href="https://danielmangum.com/categories/moss/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A Single-Cycle 64-Bit RISC-V Register File</title>
      <link>https://danielmangum.com/posts/single-cycle-rv64-register-file/</link>
      <pubDate>Fri, 04 Aug 2023 00:10:34 -0600</pubDate>
      
      <guid>https://danielmangum.com/posts/single-cycle-rv64-register-file/</guid>
      <description>It’s a simple question really: how can you read and write to the same register in a single-cycle processor? If you have spent most of your life working with software, it is tempting to think of all events as happening sequentially. However, that sequential model that we have become so familiar with as software engineers is really an abstraction that hardware offers to us to help our simple brains reason about logic.</description>
    </item>
    
    <item>
      <title>Single-Cycle and Multicycle Do Not Describe Processor Performance</title>
      <link>https://danielmangum.com/posts/single-cycle-multicycle-processor-performance/</link>
      <pubDate>Fri, 28 Jul 2023 00:10:34 -0600</pubDate>
      
      <guid>https://danielmangum.com/posts/single-cycle-multicycle-processor-performance/</guid>
      <description>If you read most literature about processor design, you’ll inevitably be presented with three broad categories of CPU architectures:
Single-Cycle Multicycle Pipelined We’ll just be focusing on the first two for today.
In fact, my favorite introductory book on computer architecture, Computer Organization and Design (Patterson &amp;amp; Hennessy) progresses through Chapter 4: The Processor by explaining these three models in sequence. The first big idea can be synthesized into the following logic:</description>
    </item>
    
    <item>
      <title>Why Create a New Instruction Set Architecture?</title>
      <link>https://danielmangum.com/posts/why-create-new-isa/</link>
      <pubDate>Fri, 21 Jul 2023 00:10:34 -0600</pubDate>
      
      <guid>https://danielmangum.com/posts/why-create-new-isa/</guid>
      <description>TL;DR: even if you&amp;rsquo;re not being pragmatic, you probably don&amp;rsquo;t need to.
One of the things I have been thinking about while starting to work on moss again is whether I should implement one of the many RISC-V flavors, or whether I should design an entirely new instruction set architecture (ISA). Designing a new one might seem like the ultimate bike-shedding effort, and if my immediate goal was getting something useful into production, I almost certainly would not embark on the journey.</description>
    </item>
    
    <item>
      <title>A Three Year Bet on Chip Design</title>
      <link>https://danielmangum.com/posts/a-three-year-bet-on-chip-design/</link>
      <pubDate>Wed, 19 Jul 2023 00:10:34 -0600</pubDate>
      
      <guid>https://danielmangum.com/posts/a-three-year-bet-on-chip-design/</guid>
      <description>I turn 27 years old today, which feels both very old and very young. 30 is often seen as a milestone, perhaps because you have spent nearly a decade operating as an “adult”, but likely are still considered in the earlier part of your career. I am a firm believer that doing most things of significance takes at least 3 years, which makes 27 a good time to decide to commit to “doing something before you are 30”.</description>
    </item>
    
  </channel>
</rss>
