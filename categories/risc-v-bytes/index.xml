<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>RISC-V Bytes on Daniel Mangum</title>
    <link>https://danielmangum.com/categories/risc-v-bytes/</link>
    <description>Recent content in RISC-V Bytes on Daniel Mangum</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 27 Dec 2022 00:10:34 -0600</lastBuildDate><atom:link href="https://danielmangum.com/categories/risc-v-bytes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RISC-V Bytes: Timer Interrupts</title>
      <link>https://danielmangum.com/posts/risc-v-bytes-timer-interrupts/</link>
      <pubDate>Tue, 27 Dec 2022 00:10:34 -0600</pubDate>
      
      <guid>https://danielmangum.com/posts/risc-v-bytes-timer-interrupts/</guid>
      <description>Operating systems do great work, but sometimes they need a little bit of help to know when to switch from one task to another. Thankfully, hardware is there to help! Today we are going to take a look at how operating systems schedule reminders for themselves using timer interrupts.
Sections Link to heading Don&amp;rsquo;t care about the why and just want to see the code? Jump ahead to The Full Picture.</description>
    </item>
    
    <item>
      <title>RISC-V Bytes: Go 1.19&#39;s Register-Based Calling Convention</title>
      <link>https://danielmangum.com/posts/risc-v-bytes-go-1-19-register-calling/</link>
      <pubDate>Mon, 08 Aug 2022 00:10:34 -0600</pubDate>
      
      <guid>https://danielmangum.com/posts/risc-v-bytes-go-1-19-register-calling/</guid>
      <description>In our last post in the RISC-V Bytes series, I briefly alluded to the proposal to switch the Go Application Binary Interface (ABI) from a stack-based calling convention to a register-based calling convention. I also mentioned that it appeared at that time that the RISC-V port would support the new calling convention as early as Go 1.19.
Last week, Go 1.19 was officially released, and sure enough, tucked in the release notes was a section mentioning that the riscv64 port now supports passing arguments and results using registers.</description>
    </item>
    
    <item>
      <title>RISC-V Bytes: Stack Use After Return in C, Go, and Rust</title>
      <link>https://danielmangum.com/posts/risc-v-bytes-stack-use-after-return/</link>
      <pubDate>Mon, 01 Aug 2022 00:10:34 -0600</pubDate>
      
      <guid>https://danielmangum.com/posts/risc-v-bytes-stack-use-after-return/</guid>
      <description>If you write any code that deals with manual memory management, you are likely familiar with the concept of a &amp;ldquo;use after free&amp;rdquo; bug. These bugs can be the source of, at best, program crashes, and at worst serious vulnerabilities. A lesser discussed counterpart to use after free, is &amp;ldquo;use after return&amp;rdquo;. In some cases, the latter can be even more troublesome, due to the operations that are performed when one procedure calls another.</description>
    </item>
    
    <item>
      <title>RISC-V Bytes: Rust Cross-Compilation</title>
      <link>https://danielmangum.com/posts/risc-v-bytes-rust-cross-compilation/</link>
      <pubDate>Sun, 30 Jan 2022 00:10:34 -0600</pubDate>
      
      <guid>https://danielmangum.com/posts/risc-v-bytes-rust-cross-compilation/</guid>
      <description>This is part of a series on the blog where we explore RISC-V by breaking down real programs and explaining how they work. You can view all posts in this series on the RISC-V Bytes page.
Today we are going to take a brief detour from our previous posts in this series and look at Rust Cross-Compilation for RISC-V. This will be a shorter post focused on providing useful information about how rustc works, as well as offering exact steps and configuration to target RISC-V when compiling your Rust programs.</description>
    </item>
    
    <item>
      <title>RISC-V Bytes: Privilege Levels</title>
      <link>https://danielmangum.com/posts/risc-v-bytes-privilege-levels/</link>
      <pubDate>Mon, 27 Dec 2021 00:10:34 -0600</pubDate>
      
      <guid>https://danielmangum.com/posts/risc-v-bytes-privilege-levels/</guid>
      <description>This is part of a series on the blog where we explore RISC-V by breaking down real programs and explaining how they work. You can view all posts in this series on the RISC-V Bytes page.
It has been a bit since our last post, but today we are going to begin our journey into some of the more interesting areas of RISC-V systems. In the first post in the series, we installed our RISC-V toolchain, which included QEMU.</description>
    </item>
    
    <item>
      <title>RISC-V Bytes: Introduction to Instruction Formats</title>
      <link>https://danielmangum.com/posts/risc-v-bytes-intro-instruction-formats/</link>
      <pubDate>Mon, 12 Jul 2021 00:10:34 -0600</pubDate>
      
      <guid>https://danielmangum.com/posts/risc-v-bytes-intro-instruction-formats/</guid>
      <description>This is part of a series on the blog where we explore RISC-V by breaking down real programs and explaining how they work. You can view all posts in this series on the RISC-V Bytes page.
So far in this series, we have been looking at the assembly generated when compiling relatively simple programs. At this point, we have seen instructions that perform a wide variety of operations. Let&amp;rsquo;s take another look at our minimal example from the Passing on the Stack post:</description>
    </item>
    
    <item>
      <title>RISC-V Bytes: Passing on the Stack</title>
      <link>https://danielmangum.com/posts/risc-v-bytes-passing-on-the-stack/</link>
      <pubDate>Wed, 30 Jun 2021 01:41:34 -0600</pubDate>
      
      <guid>https://danielmangum.com/posts/risc-v-bytes-passing-on-the-stack/</guid>
      <description>This is part of a series on the blog where we explore RISC-V by breaking down real programs and explaining how they work. You can view all posts in this series on the RISC-V Bytes page.
I once took a class on compilers where my professor told us that a CPU is like a human brain: it can store important data and access it quickly, but there is a limit to the amount of data that can be stored.</description>
    </item>
    
    <item>
      <title>RISC-V Bytes: Caller and Callee Saved Registers</title>
      <link>https://danielmangum.com/posts/risc-v-bytes-caller-callee-registers/</link>
      <pubDate>Fri, 18 Jun 2021 01:41:34 -0600</pubDate>
      
      <guid>https://danielmangum.com/posts/risc-v-bytes-caller-callee-registers/</guid>
      <description>This is part of a new series I am starting on the blog where weâ€™ll explore RISC-V by breaking down real programs and explaining how they work. You can view all posts in this series on the RISC-V Bytes page.
When looking at the generated assembly for a function, you may have noticed that the first few instructions involve moving values from registers to the stack, then loading those values back into the same registers before returning.</description>
    </item>
    
    <item>
      <title>RISC-V Bytes: Cross-Platform Debugging with QEMU and GDB</title>
      <link>https://danielmangum.com/posts/risc-v-bytes-qemu-gdb/</link>
      <pubDate>Tue, 01 Jun 2021 01:41:34 -0600</pubDate>
      
      <guid>https://danielmangum.com/posts/risc-v-bytes-qemu-gdb/</guid>
      <description>This is part of a new series I am starting on the blog where we&amp;rsquo;ll explore RISC-V by breaking down real programs and explaining how they work. You can view all posts in this series on the RISC-V Bytes page.
To start of the series, we are just going to get setup to do some exploration. I am going to assume you will not primarily be using a RISC-V machine1, so we need to configure our local development environment for cross-platform compiling, emulation, and debugging.</description>
    </item>
    
  </channel>
</rss>
